generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model attendance {
  attendance_id   Int      @id @default(autoincrement())
  user_id         Int?
  gym_id          Int?
  attendance_date DateTime @db.Date
  users           users?   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model chatconversations {
  chat_id                                   Int            @id @default(autoincrement())
  user_id                                   Int?
  trainer_id                                Int?
  last_message                              String?        @db.VarChar(255)
  last_message_timestamp                    DateTime?      @default(now()) @db.Timestamp(6)
  users_chatconversations_trainer_idTousers users?         @relation("chatconversations_trainer_idTousers", fields: [trainer_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  users_chatconversations_user_idTousers    users?         @relation("chatconversations_user_idTousers", fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  chatmessages                              chatmessages[]
}

model chatmessages {
  message_id        Int                @id @default(autoincrement())
  chat_id           Int?
  sender_id         Int?
  message_content   Json?              @db.Json
  sent_at           DateTime?          @default(now()) @db.Timestamp(6)
  is_read           Boolean?           @default(false)
  chatconversations chatconversations? @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade, onUpdate: NoAction)
}

model customworkoutexercises {
  custom_workout_exercise_id Int             @id @default(autoincrement())
  custom_workout_id          Int?
  exercise_id                Int?
  sets                       Int
  reps                       Int
  duration                   Decimal         @db.Decimal(5, 2)
  customworkouts             customworkouts? @relation(fields: [custom_workout_id], references: [custom_workout_id], onDelete: Cascade, onUpdate: NoAction)
  exercises                  exercises?      @relation(fields: [exercise_id], references: [exercise_id], onDelete: Cascade, onUpdate: NoAction)
}

model customworkouts {
  custom_workout_id      Int                      @id @default(autoincrement())
  user_id                Int?
  custom_workout_name    String                   @unique @db.VarChar(100)
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  customworkoutexercises customworkoutexercises[]
  users                  users?                   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

// model dietplans {
//   diet_plan_id                      Int        @id @default(autoincrement())
//   name                              String     @unique @db.VarChar(100)
//   user_id                           Int?
//   trainer_id                        Int?
//   calorie_goal                      Decimal?   @db.Decimal(6, 2)
//   goal_type                         goal_type
//   description                       String?
//   created_at                        DateTime?  @default(now()) @db.Timestamp(6)
//   updated_at                        DateTime?  @default(now()) @db.Timestamp(6)
//   dietlogs                          dietlogs[]
//   users_dietplans_trainer_idTousers users?     @relation("dietplans_trainer_idTousers", fields: [trainer_id], references: [user_id], onUpdate: NoAction)
//   users_dietplans_user_idTousers    users?     @relation("dietplans_user_idTousers", fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
//   meals                             meals[]
// }

// model meals {
//   meal_id        Int        @id @default(autoincrement())
//   image          String?    @db.VarChar(255)
//   diet_plan_id   Int?
//   meal_name      String     @unique @db.VarChar(100)
//   meal_time      meal_time
//   calories       Decimal    @db.Decimal(5, 2)
//   description    String?
//   macronutrients String?    @db.VarChar(100)
//   created_at     DateTime?  @default(now()) @db.Timestamp(6)
//   dietlogs       dietlogs[]
//   dietplans      dietplans? @relation(fields: [diet_plan_id], references: [diet_plan_id], onDelete: Cascade, onUpdate: NoAction)
// }

// model dietlogs {
//   log_id            Int        @id @default(autoincrement())
//   user_id           Int?
//   diet_plan_id      Int?
//   meal_id           Int?
//   consumed_calories Decimal?   @db.Decimal(5, 2)
//   custom_meal       String?    @db.VarChar(100)
//   notes             String?
//   log_date          DateTime?  @default(now()) @db.Timestamp(6)
//   dietplans         dietplans? @relation(fields: [diet_plan_id], references: [diet_plan_id], onDelete: NoAction, onUpdate: NoAction)
//   meals             meals?     @relation(fields: [meal_id], references: [meal_id], onDelete: NoAction, onUpdate: NoAction)
//   users             users?     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
// }

model dietplans {
  diet_plan_id Int       @id @default(autoincrement())
  name         String    @unique @db.VarChar(100)
  user_id      Int // Linked to users
  trainer_id   Int? // Linked to trainers
  calorie_goal Decimal?  @db.Decimal(6, 2)
  goal_type    goal_type
  description  String?
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @updatedAt

  // Relations
  user    users?  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  trainer users?  @relation("dietplans_trainer_idTousers", fields: [trainer_id], references: [user_id], onUpdate: NoAction)
  meals   meals[]
}

model meals {
  meal_id        Int       @id @default(autoincrement())
  diet_plan_id   Int
  meal_name      String    @db.VarChar(100)
  meal_time      meal_time
  image          String?   @db.VarChar(255)
  calories       Decimal   @db.Decimal(5, 2)
  macronutrients Json? // JSON for better data storage
  description    String?
  created_at     DateTime  @default(now()) @db.Timestamp(6)

  // Relations
  dietplan  dietplans  @relation(fields: [diet_plan_id], references: [diet_plan_id], onDelete: Cascade)
  meal_logs meallogs[]
}

model meallogs {
  meal_log_id Int      @id @default(autoincrement())
  user_id     Int // User who logs the meal
  meal_id     Int // Meal that was logged
  quantity    Decimal  @db.Decimal(5, 2) // e.g., 2 servings
  log_time    DateTime @default(now()) @db.Timestamp(6)

  // Relations
  user users @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  meal meals @relation(fields: [meal_id], references: [meal_id], onDelete: Cascade)
}

model exercises {
  exercise_id                Int                      @id @default(autoincrement())
  exercise_name              String                   @unique @db.VarChar(100)
  calories_burned_per_minute Decimal                  @db.Decimal(5, 2)
  created_at                 DateTime?                @default(now()) @db.Timestamp(6)
  description                String
  image_url                  String?                  @db.VarChar(255)
  target_muscle_group        String
  video_url                  String?                  @db.VarChar(255)
  updated_at                 DateTime                 @updatedAt
  customworkoutexercises     customworkoutexercises[]
  workoutexercises           workoutexercises[]
  workoutexerciseslogs       workoutexerciseslogs[]
}

model gym {
  gym_id         Int       @id @default(autoincrement())
  gym_name       String    @unique @db.VarChar(100)
  location       String    @db.VarChar(255)
  contact_number String    @unique @db.VarChar(20)
  admin_id       Int?
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  users          users?    @relation(fields: [admin_id], references: [user_id], onUpdate: NoAction)
}

model membership_plan {
  plan_id     Int           @id @default(autoincrement()) // Unique ID for each plan
  plan_type   plan_type // Enum for plan types (Monthly, Yearly, etc.)
  price       Decimal       @db.Decimal(10, 2) // Price of the plan
  created_at  DateTime?     @default(now()) @db.Timestamp(6) // Plan creation timestamp
  updated_at  DateTime?     @default(now()) @db.Timestamp(6) // Plan update timestamp
  memberships memberships[] // One-to-many relation with memberships
}

model memberships {
  membership_id Int               @id @default(autoincrement()) // Unique ID for each subscription
  user_id       Int? // ID of the user who subscribes
  plan_id       Int // ID of the plan subscribed
  start_date    DateTime?         @db.Date // Start date of the subscription
  end_date      DateTime?         @db.Date // End date of the subscription
  status        membership_status @default(Pending) // Enum for membership status (Active, Expired, etc.)
  created_at    DateTime?         @default(now()) @db.Timestamp(6) // Subscription creation timestamp
  updated_at    DateTime?         @default(now()) @db.Timestamp(6) // Subscription update timestamp

  payments             payments[] // One-to-many relation with payments
  subscription_changes subscription_changes[] // One-to-many relation with subscription_changes
  membership_plan      membership_plan        @relation(fields: [plan_id], references: [plan_id], onDelete: Cascade, onUpdate: NoAction) // Relation to membership_plan
  users                users?                 @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction) // Relation to users
}

model payments {
  payment_id     Int            @id @default(autoincrement()) // Unique ID for payment
  membership_id  Int? // Link to the membership being paid for
  user_id        Int? // ID of the user making the payment
  price          Decimal        @db.Decimal(10, 2) // Payment amount
  payment_method payment_method // Enum for payment methods (Khalti, Cash, etc.)
  transaction_id String         @unique @db.VarChar(100) // Khalti payment details
  pidx           String?        @db.VarChar(100)
  payment_date   DateTime       @db.Date // Date of payment
  payment_status payment_status // Enum for payment status (Paid, Pending, etc.)
  created_at     DateTime?      @default(now()) @db.Timestamp(6) // Payment creation timestamp
  memberships    memberships?   @relation(fields: [membership_id], references: [membership_id], onDelete: Cascade, onUpdate: NoAction) // Relation to memberships
  users          users?         @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction) // Relation to users
}

model subscription_changes {
  change_id     Int         @id @default(autoincrement())
  membership_id Int
  previous_plan Int
  new_plan      Int
  change_date   DateTime    @default(now())
  action        String
  memberships   memberships @relation(fields: [membership_id], references: [membership_id], onDelete: Cascade)
}

model users {
  user_id                                               Int                 @id @default(autoincrement())
  user_name                                             String?             @unique @db.VarChar(100)
  full_name                                             String?             @db.VarChar(100)
  address                                               String?             @db.VarChar(255)
  birthdate                                             DateTime?
  height                                                Decimal?            @db.Decimal
  current_weight                                        Decimal?            @db.Decimal
  gender                                                gender?
  email                                                 String              @unique @db.VarChar(255)
  password                                              String              @db.VarChar(255)
  phone_number                                          String?             @unique @db.VarChar(20)
  role                                                  role
  fitness_level                                         fitness_level?
  goal_type                                             goal_type?
  allergies                                             String?             @db.VarChar(255)
  calorie_goals                                         Decimal?            @db.Decimal(6, 2)
  card_number                                           String?             @db.VarChar(50)
  profile_image                                         String?             @db.VarChar(255)
  reset_token                                           String? // Nullable field for reset token
  reset_token_expiry                                    DateTime? // Nullable field for token expiry
  created_at                                            DateTime?           @default(now()) @db.Timestamp(6)
  updated_at                                            DateTime?           @default(now()) @db.Timestamp(6)
  attendance                                            attendance[]
  chatconversations_chatconversations_trainer_idTousers chatconversations[] @relation("chatconversations_trainer_idTousers")
  chatconversations_chatconversations_user_idTousers    chatconversations[] @relation("chatconversations_user_idTousers")
  customworkouts                                        customworkouts[]
  dietPlans                                             dietplans[]
  mealLogs                                              meallogs[]
  gym                                                   gym[]
  memberships                                           memberships[]
  payments                                              payments[]
  workoutlogs                                           workoutlogs[]
  workouts_workouts_trainer_idTousers                   workouts[]          @relation("workouts_trainer_idTousers")
  workouts_workouts_user_idTousers                      workouts[]          @relation("workouts_user_idTousers")
  personal_bests                                        personal_bests[]
  weight_logs                                           weight_logs[] // One-to-many relation with weight_logs
  otp                                                   String?             @db.VarChar(6) // OTP code
  otp_expiry                                            DateTime? // Expiry time
  verified                                              Boolean?            @default(false) // Email verification status

  dietplans dietplans[] @relation("dietplans_trainer_idTousers")
}

model workoutexercises {
  workout_exercise_id Int        @id @default(autoincrement())
  workout_id          Int?
  exercise_id         Int?
  sets                Int
  reps                Int
  duration            Decimal    @db.Decimal(5, 2)
  exercises           exercises? @relation(fields: [exercise_id], references: [exercise_id], onDelete: Cascade, onUpdate: NoAction)
  workouts            workouts?  @relation(fields: [workout_id], references: [workout_id], onDelete: Cascade, onUpdate: NoAction)
}

model workouts {
  workout_id                       Int                @id @default(autoincrement())
  user_id                          Int?
  workout_name                     String             @unique @db.VarChar(100)
  description                      String
  target_muscle_group              String             @db.VarChar(50)
  difficulty                       difficulty_level
  goal_type                        goal_type          @default(Weight_Loss) // Set a default value here
  fitness_level                    fitness_level      @default(Beginner)
  workout_image                    String?            @db.VarChar(255)
  trainer_id                       Int?
  created_at                       DateTime?          @default(now()) @db.Timestamp(6)
  updated_at                       DateTime?          @default(now()) @db.Timestamp(6)
  workoutexercises                 workoutexercises[]
  workoutlogs                      workoutlogs[]
  users_workouts_trainer_idTousers users?             @relation("workouts_trainer_idTousers", fields: [trainer_id], references: [user_id], onUpdate: NoAction)
  users_workouts_user_idTousers    users?             @relation("workouts_user_idTousers", fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model workoutexerciseslogs {
  log_id            Int          @id @default(autoincrement())
  workout_log_id    Int?
  exercise_id       Int?
  exercise_duration Decimal?     @db.Decimal(5, 2) // Store duration in minutes (calculated in the app)
  rest_duration     Decimal?     @db.Decimal(5, 2) // Optional rest duration in minutes
  skipped           Boolean?     @default(false)
  exercises         exercises?   @relation(fields: [exercise_id], references: [exercise_id], onDelete: Cascade, onUpdate: NoAction)
  workoutlogs       workoutlogs? @relation(fields: [workout_log_id], references: [log_id], onDelete: Cascade, onUpdate: NoAction)
}

model workoutlogs {
  log_id               Int                    @id @default(autoincrement())
  user_id              Int?
  workout_id           Int?
  workout_date         DateTime?              @default(now()) @db.Timestamp(6)
  total_duration       Decimal?               @db.Decimal(5, 2)
  calories_burned      Decimal?               @db.Decimal(10, 2)
  performance_notes    String?
  workoutexerciseslogs workoutexerciseslogs[]
  users                users?                 @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  workouts             workouts?              @relation(fields: [workout_id], references: [workout_id], onDelete: NoAction, onUpdate: NoAction)
}

model personal_bests {
  personal_best_id      Int                 @id @default(autoincrement()) // Unique ID for the personal best entry
  user_id               Int // The user who achieved the personal best
  supported_exercise_id Int // The exercise for which the personal best is logged (only Squat, Bench Press, Deadlift)
  weight                Decimal             @db.Decimal(6, 2) // The weight lifted in the personal best
  reps                  Int // The number of reps for the personal best (if relevant)
  achieved_at           DateTime            @default(now()) // Date when the personal best was achieved
  users                 users               @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  supported_exercises   supported_exercises @relation(fields: [supported_exercise_id], references: [supported_exercise_id], onDelete: Cascade)
}

model supported_exercises {
  supported_exercise_id Int              @id @default(autoincrement())
  exercise_name         String           @unique @db.VarChar(100) // Name of the supported exercise
  created_at            DateTime?        @default(now()) @db.Timestamp(6) // Timestamp of creation
  updated_at            DateTime         @updatedAt // Timestamp of last update
  personal_bests        personal_bests[]
}

model weight_logs {
  id        Int      @id @default(autoincrement()) // Unique ID for each weight log
  user_id   Int // ID of the user
  weight    Decimal  @db.Decimal(6, 2) // User's weight at the time of the log
  logged_at DateTime @default(now()) // Timestamp of when the weight was logged

  users users @relation(fields: [user_id], references: [user_id], onDelete: Cascade) // Relation to the users model
}

enum difficulty_level {
  Easy
  Intermediate
  Hard
}

enum fitness_level {
  Beginner
  Intermediate
  Advanced
  Athlete
}

enum gender {
  Male
  Female
  Other
}

//TODO: goal strength, and hypertrophy
enum goal_type {
  Weight_Loss @map("Weight Loss")
  Muscle_Gain @map("Muscle Gain")
  Endurance
  Maintenance
  Flexibility
}

enum meal_time {
  Breakfast
  Lunch
  Dinner
  Snack
}

enum membership_status {
  Pending // New status for admin approval
  Active
  Expired
  Cancelled
}

enum payment_method {
  Khalti
  Cash
}

enum payment_status {
  Paid
  Pending
  Failed
}

enum plan_type {
  Monthly
  Yearly
  Quaterly
}

enum user_role {
  Member
  Trainer
  Admin
}

enum role {
  Member
  Trainer
  Admin
}
